#set(CMAKE_POSITION_INDEPENDENT_CODE OFF)
macro(mini_module module_name additional_library)
    include(shiva/sfml/${module_name}/CMakeSources.cmake)
    set(MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
    CREATE_MODULE_PLUGIN(shiva::shiva-system-sfml-${module_name} "${MODULE_SOURCES}" ${MODULE_PATH} "systems" "sfml/shiva")
    target_link_libraries(shiva-system-sfml-${module_name} PUBLIC shiva::ecs PUBLIC ${additional_library})
    AUTO_TARGETS_PLUGINS_INSTALL(system-sfml-${module_name} shiva-sfml)
endmacro()

if (SHIVA_USE_SFML_AS_RENDERER)
    if (WIN32)
        set(SFML_STATIC_LIBRARIES TRUE)
        if (MSVC)
            foreach (flag_var CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
                if (${flag_var} MATCHES "/MD")
                    string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
                endif (${flag_var} MATCHES "/MD")
                if (${flag_var} MATCHES "/MDd")
                    string(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
                endif (${flag_var} MATCHES "/MDd")
            endforeach (flag_var)
        endif (MSVC)
    endif ()

    find_package(SFML CONFIG REQUIRED system window graphics audio)
    mini_module(resources "sfml-graphics;sfml-audio;shiva::lua")
    mini_module(graphics shiva-system-sfml-resources)
    mini_module(inputs shiva-system-sfml-resources)
    PREPARE_MODULE_INSTALLATION(shiva-sfml)
endif ()
